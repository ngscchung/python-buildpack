#!/usr/bin/env bash


echo "=====> Inside apt!!!"

# fail fast
# set -e

LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

if [ -f "$BUILD_DIR/Aptfile" ]
then
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCELIST_DIR="$CACHE_DIR/apt/sources"

echo "*+*+*+*+*+*+*+*+*+* APT_CACHE_DIR = $APT_CACHE_DIR"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p "$APT_SOURCELIST_DIR"
APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"

APT_REGISTRY_LINE=$(grep -e "registry=" "$BUILD_DIR/Aptfile" || true)
echo "*+*+*+*+*+*+*+*+*+* APT_REGISTRY_LINE = $APT_REGISTRY_LINE"
APT_ARTIFACTORY=$(echo $APT_REGISTRY_LINE | sed 's/registry=//g;q' )
echo "*+*+*+*+*+*+*+*+*+* APT_ARTIFACTORY = $APT_ARTIFACTORY"

if [ ! -z "$APT_ARTIFACTORY" -a "$APT_ARTIFACTORY" != " " ]; then
  echo "*+*+*+*+*+*+*+*+*+* APT_ARTIFACTORY is not null or space"
  echo "deb $APT_ARTIFACTORY trusty main universe multiverse" > "$APT_SOURCES"
  echo "deb $APT_ARTIFACTORY trusty-updates main universe multiverse" >> "$APT_SOURCES"
  echo "deb $APT_ARTIFACTORY trusty-security main universe multiverse" >> "$APT_SOURCES"
else
  echo "*+*+*+*+*+*+*+*+*+* APT_ARTIFACTORY is null or space... use default apt repo"
  cat "/etc/apt/sources.list" > "$APT_SOURCES" 
fi

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCES"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

# apt-get $APT_OPTIONS -y --force-yes -d install --reinstall libaio1 | indent
# apt-get $APT_OPTIONS -y --force-yes -d install --reinstall libspatialindex-dev | indent

for PACKAGE in $(cat $BUILD_DIR/Aptfile); do
  if [[ $PACKAGE == *registry=* ]]; then
    # Do Nothing
    :
  elif [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
# export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib\${LIBRARY_PATH:+:}\${LIBRARY_PATH}"
# export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include\${INCLUDE_PATH:+:}\${INCLUDE_PATH}"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
# export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig\${PKG_CONFIG_PATH:+:}\${PKG_CONFIG_PATH}"
EOF

# TODO: non-existing env variable like LD_LIBRARY_PATH, INCLUDE_PATH and PKG_CONFIG_PATH caused shellscript error... should add "check exist"
export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/lib/x86_64-linux-gnu/:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
# export LIBRARY_PATH="$BUILD_DIR/.apt/lib/x86_64-linux-gnu/:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
# export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/lib/x86_64-linux-gnu/:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
# export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig"

#give environment to later buildpacks
#ls -al $LP_DIR/..
#TODO: if we bundle-package the buildpack and import to PCF, the below statement will fail with error "...read-only filesystem" during cf push, 
#but the same script okay if we reference the buildpack using Github link
#this script can be safely commented out in the meantime ... but need to investigate the reason
#export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"

else
    echo "Aptfile NOT FOUND. Skip apt-get"
fi